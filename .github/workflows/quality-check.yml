name: Code Quality Check

# 添加必要的权限配置以支持CodeQL集成
permissions:
  security-events: write  # 允许上传安全扫描结果
  actions: read          # 允许读取Actions状态
  contents: read         # 允许读取代码内容

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  quality-check:
    name: 代码质量检查
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Go环境
      uses: actions/setup-go@v4
      with:
        go-version: '1.23.12'
        
    - name: 缓存Go模块
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: 下载依赖
      run: go mod download
      
    - name: 验证模块
      run: go mod verify
      
    - name: 代码格式检查
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "❌ 以下文件需要格式化:"
          gofmt -s -l .
          exit 1
        fi
        echo "✅ 代码格式检查通过"
        
    - name: 安装代码检查工具
      run: |
        go install honnef.co/go/tools/cmd/staticcheck@latest
        go install github.com/fzipp/gocyclo/cmd/gocyclo@latest
        
    - name: 静态分析 (go vet)
      run: |
        go vet ./...
        echo "✅ go vet检查通过"
        
    - name: 高级静态分析 (staticcheck)
      run: |
        staticcheck ./...
        echo "✅ staticcheck检查通过"
        
    - name: 圈复杂度检查 (gocyclo)
      run: |
        complexity_violations=$(gocyclo -over 10 . | wc -l)
        if [ $complexity_violations -gt 0 ]; then
          echo "❌ 发现圈复杂度超过10的函数:"
          gocyclo -over 10 .
          exit 1
        fi
        echo "✅ 圈复杂度检查通过"
        
    - name: 构建测试
      run: |
        go build -v ./...
        echo "✅ 构建测试通过"
        
    - name: 运行测试
      run: |
        go test -v ./...
        echo "✅ 单元测试通过"
        
    - name: 测试覆盖率检查
      run: |
        go test -coverprofile=coverage.out ./...
        coverage=$(go tool cover -func=coverage.out | grep "total:" | awk '{print $3}' | sed 's/%//')
        echo "当前测试覆盖率: ${coverage}%"
        
        # 根据项目规范检查各包覆盖率
        echo "检查各包覆盖率:"
        
        # Cache包覆盖率检查 (≥79%为良好)
        cache_output=$(go test -cover ./internal/pkg/cache 2>&1)
        cache_coverage=$(echo "$cache_output" | grep -oE '[0-9]+\.[0-9]+% of statements' | grep -oE '[0-9]+\.[0-9]+')
        if [ -z "$cache_coverage" ]; then
          echo "⚠️ 无法获取Cache包覆盖率，跳过检查"
        else
          echo "Cache包覆盖率: ${cache_coverage}%"
          if (( $(echo "$cache_coverage < 79" | bc -l) )); then
            echo "❌ Cache包覆盖率 ${cache_coverage}% 低于标准 79%"
            exit 1
          fi
        fi
        
        # Middleware包覆盖率检查 (≥81%为良好)
        middleware_output=$(go test -cover ./internal/api/middleware 2>&1)
        middleware_coverage=$(echo "$middleware_output" | grep -oE '[0-9]+\.[0-9]+% of statements' | grep -oE '[0-9]+\.[0-9]+')
        if [ -z "$middleware_coverage" ]; then
          echo "⚠️ 无法获取Middleware包覆盖率，跳过检查"
        else
          echo "Middleware包覆盖率: ${middleware_coverage}%"
          if (( $(echo "$middleware_coverage < 81" | bc -l) )); then
            echo "❌ Middleware包覆盖率 ${middleware_coverage}% 低于标准 81%"
            exit 1
          fi
        fi
        
        # Utils包覆盖率检查 (≥90%为优秀)
        utils_output=$(go test -cover ./internal/pkg/utils 2>&1)
        utils_coverage=$(echo "$utils_output" | grep -oE '[0-9]+\.[0-9]+% of statements' | grep -oE '[0-9]+\.[0-9]+')
        if [ -z "$utils_coverage" ]; then
          echo "⚠️ 无法获取Utils包覆盖率，跳过检查"
        else
          echo "Utils包覆盖率: ${utils_coverage}%"
          if (( $(echo "$utils_coverage < 90" | bc -l) )); then
            echo "❌ Utils包覆盖率 ${utils_coverage}% 低于标准 90%"
            exit 1
          fi
        fi
        
        # 总体覆盖率检查 (≥80%)
        if [ -n "$coverage" ] && (( $(echo "$coverage < 80" | bc -l) )); then
          echo "❌ 总体测试覆盖率 ${coverage}% 低于最低要求 80%"
          exit 1
        fi
        
        echo "✅ 测试覆盖率检查通过"
        echo "  • Cache包: ${cache_coverage:-'未知'}% (≥79%)"
        echo "  • Middleware包: ${middleware_coverage:-'未知'}% (≥81%)"
        echo "  • Utils包: ${utils_coverage:-'未知'}% (≥90%)"
        echo "  • 总体覆盖率: ${coverage:-'未知'}% (≥80%)"
        
    - name: 上传覆盖率报告
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.out
        
  security-check:
    name: 安全扫描
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Go环境
      uses: actions/setup-go@v4
      with:
        go-version: '1.23.12'
        
    - name: 安装Gosec
      run: |
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        
    - name: 运行Gosec安全扫描
      run: |
        # 运行 gosec 并生成 SARIF 报告，即使有问题也继续执行
        gosec -fmt sarif -out results.sarif ./... || echo "⚠️ Gosec 扫描完成，可能发现安全问题"
        # 检查文件是否生成
        if [ ! -f "results.sarif" ]; then
          echo "⚠️ SARIF 文件未生成，创建空文件"
          echo '{}' > results.sarif
        fi
        echo "✅ 安全扫描完成"
        
    - name: 上传安全扫描结果
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('results.sarif') != ''
      with:
        sarif_file: results.sarif